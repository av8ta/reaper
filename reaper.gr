import { startsWith, slice, length } from "string"
import { assertEquals } from "./util"
import { testRegex } from "./regex"
import Option from "option"
import Result from "result"
import Regex from "regex"
import List from "list"

export let makeRegex = string => Result.unwrap(Regex.make(string))

let boundsFix = (start, end, input) => {
  // ensure start at beginning of input
  let min = if (start < 0) 0 else start
  // bounds check before slicing input string
  let max = if (end > length(input)) length(input) else end
  let string = slice(min, max, input)
  (min, max, string)
}

export let matches = rule => (start, end, input) => {
  let (min, max, string) = boundsFix(start, end, input)
  // if start -> end too small to contain rule => -1
  if (max - start < length(rule)) -1 // else if it matches => rule length
   else if (startsWith(rule, string)) length(rule) else -1
}

/**
 * return length of matched input string or -1
 * 0 length match is valid
 */
export let matchRegexp = rule => (start, end, input) => {
  let (min, max, string) = boundsFix(start, end, input)
  let result = Regex.find(makeRegex(rule), string)
  match (result) {
    Some(r) => {
      let matchedString = Option.unwrap(r.group(0))
      length(matchedString)
    },
    None => -1,
  }
}

let isRegex = string => startsWith("^", string)

export let toMatcher = rule =>
  match (isRegex(rule)) {
    true => matchRegexp(rule),
    false => matches(rule),
  }

export let toMatchers = rules => List.map(toMatcher, rules)

export let or = matchers => {
  (start, end, groups, input) => {
    let mut matchLength = -1
    for (let mut i = 0; i < List.length(matchers); i += 1) {
      let matcher = Option.unwrap(List.nth(i, matchers))
      let n = matcher(start, end, input)
      // print(["i:", toString(i), "n:", toString(n), input])
      match (n) {
        n when n == -1 => void,
        _ => {
          matchLength = n
          break
        },
      }
    }
    matchLength
  }
}

export let and = matchers => {
  (start, end, groups, input) => {
    let mut cursor = 0
    let mut succeeded = true
    for (let mut i = 0; i < List.length(matchers); i += 1) {
      let matcher = Option.unwrap(List.nth(i, matchers))
      let (min, max, string) = boundsFix(start + cursor, end, input)
      let n = matcher(0, max, string)
      // print(["i:", toString(i), "n:", toString(n), toString(string), toString(min), toString(max), ])
      match (n) {
        n when n == -1 => {
          succeeded = false
          break
        },
        _ => cursor += n,
      }
    }
    if (succeeded) cursor else -1
  }
}
